"use client"

import React, { useState, useEffect } from "react"
import { Link } from "react-router-dom"
import { useTheme } from "../context/ThemeContext"
import axios from "axios"
import prepmateLogo from "../../assets/prepmate-logo.png"
import {
  Moon,
  Sun,
  Menu,
  BookOpen,
  Rocket,
  Users,
  Terminal,
  Compass,
  Search,
  ChevronRight,
  Book,
  UserCircle,
  Settings,
  Award,
  CreditCard,
  LogIn,
  LogOut,
  Map,
  Clock,
  Star,
  X,
  ChevronDown,
  Zap,
  Code2,
  MessageSquare,
  Brain
} from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"
import config from '../../config/api'

// Backend URL Configuration
const BACKEND_URL = config.BACKEND_URL

const navigationSections = [
  {
    name: "Contest",
    icon: BookOpen,
    bgColor: "bg-indigo-100",
    color: "text-indigo-600",
    subSections: [{ name: "Contest Tracker", icon: Terminal, route: "/contest" }],
  },
  {
    name: "Courses",
    icon: BookOpen,
    bgColor: "bg-indigo-100",
    color: "text-indigo-600",
    subSections: [{ name: "DSA Practice", icon: Terminal, route: "/courses/data-structures" }],
  },
  {
    name: "Community",
    icon: Users,
    bgColor: "bg-indigo-100",
    color: "text-indigo-600",
    subSections: [
      { name: "Forums", icon: Compass, route: "/community/forums" },
      { name: "Mentorship", icon: Book, route: "/community/mentorship" },
    ],
  },
  {
    name: "Collaboration",
    icon: Users,
    bgColor: "bg-purple-100",
    color: "text-purple-600",
    subSections: [
      { name: "Code Together", icon: Code2, route: "/collaborate" },
      { name: "Interview Mode", icon: MessageSquare, route: "/ss" },
    ],
  },
 
  
]

// Create an AuthContext to manage authentication state
const AuthContext = React.createContext({
  isLoggedIn: false,
  user: null,
  login: () => {},
  logout: () => {},
})

export const AuthProvider = ({ children }) => {
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const [user, setUser] = useState(null)

  useEffect(() => {
    // Check if user is already logged in
    const checkAuthStatus = async () => {
      try {
        const sessionToken = localStorage.getItem("sessionToken")
        if (sessionToken) {
          // Send token as both cookie and Authorization header
          const response = await axios.get(`${BACKEND_URL}/api/auth/current-user`, {
            withCredentials: true, // Important for sending cookies
            headers: {
              Authorization: `Bearer ${sessionToken}`,
            },
          })

          if (response.data) {
            setIsLoggedIn(true)
            setUser(response.data)
          }
          if (response.data.email) {
            localStorage.setItem("userEmail", response.data.email);
            localStorage.setItem("userName", response.data.name);
          }
        }
      } catch (error) {
        console.error("Auth check failed:", error)
        setIsLoggedIn(false)
        setUser(null)
        // Clear token if invalid
        localStorage.removeItem("sessionToken")
      }
    }

    checkAuthStatus()
  }, [])

  const login = () => {
    // Redirect to Google OAuth login
    window.location.href = `${BACKEND_URL}/api/auth/google`
  }

  const logout = async () => {
    try {
      await axios.post(
        `${BACKEND_URL}/api/auth/logout`,
        {},
        {
          withCredentials: true,
        },
      )
      setIsLoggedIn(false)
      setUser(null)
      localStorage.removeItem("sessionToken")
    } catch (error) {
      console.error("Logout failed", error)
    }
  }

  return <AuthContext.Provider value={{ isLoggedIn, user, login, logout }}>{children}</AuthContext.Provider>
}

// Custom hook to use auth context
export const useAuth = () => {
  const context = React.useContext(AuthContext)
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider")
  }
  return context
}

// Enhanced Streak Component for Navigation
const StreakDisplay = () => {
  const { isDarkMode } = useTheme()
  const [streak, setStreak] = useState({
    currentStreak: 0,
    longestStreak: 0,
  })
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchStreak = async () => {
      try {
        const userEmail = localStorage.getItem("userEmail")
        if (!userEmail) {
          setLoading(false)
          return
        }
        const response = await axios.get(`${config.API_URL}/streak`, {
          params: { email: userEmail },
          withCredentials: true
        })
        setStreak(response.data)
        setLoading(false)

        // Update streak on activity
        await axios.post(`${config.API_URL}/streak/update`, {
          email: userEmail
        })
      } catch (err) {
        console.error("Error fetching streak:", err)
        setLoading(false)
      }
    }

    // Initial fetch
    fetchStreak()

    // Set up automatic refresh every hour
    const intervalId = setInterval(fetchStreak, 3600000) // 1 hour in milliseconds

    // Clean up interval on component unmount
    return () => clearInterval(intervalId)
  }, [])

  if (loading) {
    return (
      <div
        className={`flex items-center space-x-2 px-4 py-2 rounded-full backdrop-blur-sm ${
          isDarkMode ? "bg-slate-800/60" : "bg-white/80"
        }`}
      >
        <div className="w-5 h-5 rounded-full bg-gray-300 animate-pulse"></div>
        <span className="text-sm font-medium">...</span>
      </div>
    )
  }

  return (
    <div
      className={`flex items-center space-x-2 px-4 py-2 rounded-full backdrop-blur-sm transition-all duration-300 transform hover:scale-105 ${
        isDarkMode
          ? "bg-slate-800/60 text-orange-400 border border-slate-700/50"
          : "bg-orange-100/80 text-orange-600 border border-orange-200/50"
      }`}
      style={{
        boxShadow: isDarkMode ? "0 4px 15px rgba(251, 146, 60, 0.1)" : "0 4px 15px rgba(251, 146, 60, 0.1)",
      }}
    >
      <Zap size={18} className="text-orange-500" />
      <span className="text-sm font-semibold">
        {streak.currentStreak} day{streak.currentStreak !== 1 ? "s" : ""}
      </span>
    </div>
  )
}

const ProfileDropdown = ({ onLogin, onLogout, isMobile = false }) => {
  const { isDarkMode } = useTheme()
  const { isLoggedIn, user, login, logout } = useAuth()
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false)

  const profileMenuItems = [
    {
      name: "My Profile",
      icon: UserCircle,
      color: "text-indigo-400",
      route: "/profile",
    },
    {
      name: "My Learning",
      icon: Award,
      color: "text-emerald-400",
      route: "/learning",
    },
    {
      name: "Billing",
      icon: CreditCard,
      color: "text-rose-400",
      route: "/billing",
    },
    {
      name: "Settings",
      icon: Settings,
      color: "text-sky-400",
      route: "/settings",
    },
  ]

  // Determine the position of the dropdown based on whether it's mobile or desktop
  const dropdownPosition = isMobile ? "bottom-0 left-0 right-0" : "top-24 right-4"

  return (
    <div className="relative">
      {isLoggedIn ? (
        <>
          <div
            onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
            className={`
              flex items-center space-x-3 p-3 rounded-xl cursor-pointer
              transition-all duration-300 group backdrop-blur-sm
              ${
                isDarkMode
                  ? "hover:bg-slate-800/60 border border-slate-700/50"
                  : "hover:bg-white/80 border border-gray-200/50"
              }
            `}
            style={{
              boxShadow: isDarkMode ? "0 4px 15px rgba(139, 92, 246, 0.1)" : "0 4px 15px rgba(139, 92, 246, 0.1)",
            }}
          >
            <div className="relative">
              <img
                src={user?.avatar || "/default-avatar.png"}
                alt="User Avatar"
                className="w-8 h-8 rounded-full border-2 transition-all duration-300 group-hover:scale-105 border-indigo-500"
              />
              <div className="absolute bottom-0 right-0 w-3 h-3 bg-emerald-500 rounded-full border-2 border-white" />
            </div>
            <div className="flex flex-col">
              <span className={`font-semibold text-sm ${isDarkMode ? "text-white" : "text-gray-900"}`}>
                {user?.name}
              </span>
              {isMobile && (
                <span className={`text-xs ${isDarkMode ? "text-slate-400" : "text-gray-500"}`}>{user?.email}</span>
              )}
            </div>
            <ChevronDown
              size={16}
              className={`transition-transform ${isProfileMenuOpen ? "rotate-180" : ""} ${
                isDarkMode ? "text-slate-400" : "text-gray-500"
              }`}
            />
          </div>

          <AnimatePresence>
            {isProfileMenuOpen && (
              <motion.div
                initial={{ opacity: 0, y: isMobile ? 20 : -20, scale: 0.95 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                exit={{ opacity: 0, y: isMobile ? 20 : -20, scale: 0.95 }}
                className={`
                  fixed ${dropdownPosition} w-full sm:w-80
                  ${isDarkMode ? "bg-slate-900/95 border-slate-700/50" : "bg-white/95 border-gray-200/50"}
                  border rounded-2xl shadow-2xl backdrop-blur-md
                  overflow-hidden z-50
                `}
                style={{
                  boxShadow: isDarkMode ? "0 25px 50px rgba(0, 0, 0, 0.5)" : "0 25px 50px rgba(0, 0, 0, 0.15)",
                }}
              >
                {/* User Profile Header */}
                {!isMobile && (
                  <div
                    className={`
                    p-6 flex items-center space-x-4
                    ${isDarkMode ? "bg-slate-800/50" : "bg-gray-50/50"}
                    border-b ${isDarkMode ? "border-slate-700/50" : "border-gray-200/50"}
                  `}
                  >
                    <img
                      src={user?.avatar || "/default-avatar.png"}
                      alt="User Avatar"
                      className="w-16 h-16 rounded-full border-2 border-purple-500"
                    />
                    <div>
                      <h3 className={`text-xl font-bold ${isDarkMode ? "text-white" : "text-gray-900"}`}>
                        {user?.name}
                      </h3>
                      <p className={`text-sm ${isDarkMode ? "text-slate-400" : "text-gray-500"}`}>{user?.email}</p>
                    </div>
                  </div>
                )}

                {/* User Details */}
                {!isMobile && (
                  <div className="p-6">
                    <div className={`grid grid-cols-3 gap-4 ${isDarkMode ? "text-slate-300" : "text-gray-700"}`}>
                      <div className="flex items-center space-x-2">
                        <Star className="text-yellow-400" size={20} />
                        <span className="text-sm font-medium">Beginner</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Clock className="text-blue-400" size={20} />
                        <span className="text-sm font-medium">2024</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Map className="text-green-400" size={20} />
                        <span className="text-sm font-medium">Global</span>
                      </div>
                    </div>
                  </div>
                )}

                {/* Profile Menu Items */}
                {profileMenuItems.map((item) => (
                  <Link
                    key={item.name}
                    to={item.route}
                    onClick={() => setIsProfileMenuOpen(false)}
                    className={`
                      flex items-center space-x-4 p-4 cursor-pointer
                      transition-all duration-300 group no-underline
                      border-t ${isDarkMode ? "border-slate-700/50" : "border-gray-200/50"}
                      ${isDarkMode ? "hover:bg-slate-800/50 text-slate-300" : "hover:bg-gray-50/50 text-gray-800"}
                    `}
                  >
                    <item.icon className={`${item.color} group-hover:scale-110 transition-transform`} size={22} />
                    <span className="font-medium">{item.name}</span>
                  </Link>
                ))}

                {/* Logout */}
                <div
                  onClick={logout}
                  className={`
                    flex items-center space-x-4 p-4 cursor-pointer
                    border-t ${isDarkMode ? "border-slate-700/50" : "border-gray-200/50"}
                    transition-all duration-300 group
                    ${isDarkMode ? "hover:bg-red-900/30 text-red-300" : "hover:bg-red-50/50 text-red-600"}
                  `}
                >
                  <LogOut
                    className={`
                      ${isDarkMode ? "text-red-400" : "text-red-500"}
                      group-hover:scale-110 transition-transform
                    `}
                    size={22}
                  />
                  <span className="font-medium">Logout</span>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </>
      ) : (
        <button
          onClick={login}
          className={`
            flex items-center space-x-3 px-6 py-3 rounded-xl font-semibold text-lg
            transition-all duration-300 transform hover:scale-105 backdrop-blur-sm
            ${
              isDarkMode
                ? "bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-500 hover:to-blue-500"
                : "bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700"
            }
          `}
          style={{
            boxShadow: isDarkMode ? "0 8px 25px rgba(139, 92, 246, 0.3)" : "0 8px 25px rgba(139, 92, 246, 0.2)",
          }}
        >
          <LogIn size={20} />
          <span>Login</span>
        </button>
      )}
    </div>
  )
}

const MobileMenu = ({ isOpen, onClose, navigationSections }) => {
  const { isDarkMode } = useTheme()
  const { isLoggedIn, user, login, logout } = useAuth()
  const [openSection, setOpenSection] = useState(null)

  const toggleSection = (sectionName) => {
    setOpenSection(openSection === sectionName ? null : sectionName)
  }

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ x: "100%" }}
          animate={{ x: 0 }}
          exit={{ x: "100%" }}
          transition={{ type: "tween", duration: 0.3 }}
          className={`
            fixed inset-0 z-50 overflow-y-auto
            ${isDarkMode ? "bg-slate-900/95" : "bg-white/95"}
            backdrop-blur-md
          `}
        >
          {/* Mobile Menu Header */}
          <div
            className={`
            flex justify-between items-center p-6
            ${isDarkMode ? "bg-slate-900 text-white" : "bg-white text-black"}
            border-b ${isDarkMode ? "border-slate-700/50" : "border-gray-200/50"}
          `}
          >
            <div className="flex items-center space-x-4">
              <div
                className={` rounded-xl flex items-center justify-center
               `}
              >
              <Link to="/" className="text-xl font-bold tracking-tight pl-4">
              <img src={prepmateLogo} alt="Prepmate Logo" className="h-[22px] w-auto" />
            </Link>
              </div>
             
            </div>
            <button
              onClick={onClose}
              className={`
                p-3 rounded-xl transition-all duration-300 hover:scale-105
                ${isDarkMode ? "hover:bg-slate-800 text-slate-300" : "hover:bg-gray-100 text-gray-600"}
              `}
            >
              <X size={24} />
            </button>
          </div>

          {/* User Profile */}
          <div className="p-6">
            <ProfileDropdown onLogin={login} onLogout={logout} isMobile={true} />
          </div>

          {/* Streak Info (Mobile) */}
          {isLoggedIn && (
            <div className="px-6 pb-6">
              <StreakDisplay />
            </div>
          )}

          {/* Navigation Sections */}
          {navigationSections.map((section) => (
            <div key={section.name} className="px-6 py-2">
              <div
                className={`
                  flex items-center justify-between p-4 rounded-xl cursor-pointer
                  transition-all duration-300 backdrop-blur-sm
                  ${
                    isDarkMode
                      ? "bg-slate-800/50 text-slate-200 border border-slate-700/50"
                      : "bg-gray-100/50 text-gray-800 border border-gray-200/50"
                  }
                `}
                onClick={() => toggleSection(section.name)}
              >
                <div className="flex items-center space-x-3">
                  <section.icon className={section.color} size={24} />
                  <span className="text-lg font-semibold">{section.name}</span>
                </div>
                <ChevronDown
                  size={20}
                  className={`
                    transition-transform
                    ${openSection === section.name ? "rotate-180" : ""}
                  `}
                />
              </div>

              <AnimatePresence>
                {openSection === section.name && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    className="mt-2 ml-4 space-y-2"
                  >
                    {section.subSections.map((subSection) => (
                      <Link
                        key={subSection.name}
                        to={subSection.route}
                        onClick={onClose}
                        className={`
                          flex items-center justify-between p-3 rounded-lg
                          cursor-pointer transition-all duration-300 group no-underline
                          ${isDarkMode ? "hover:bg-slate-800/50 text-slate-300" : "hover:bg-gray-100/50 text-gray-700"}
                        `}
                      >
                        <div className="flex items-center space-x-3">
                          <subSection.icon
                            className={`
                              ${isDarkMode ? "text-slate-400" : "text-gray-600"}
                              group-hover:scale-110 transition-transform
                            `}
                            size={20}
                          />
                          <span className="font-medium">{subSection.name}</span>
                        </div>
                        <ChevronRight
                          className={`
                            ${isDarkMode ? "text-slate-500" : "text-gray-400"}
                            group-hover:translate-x-1 transition-transform
                          `}
                          size={18}
                        />
                      </Link>
                    ))}
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          ))}
        </motion.div>
      )}
    </AnimatePresence>
  )
}

const Navigation = () => {
  const { isDarkMode, toggleTheme, colors, schemes } = useTheme()
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  const [isMobile, setIsMobile] = useState(false)
  const [openSection, setOpenSection] = useState(null)
  const { isLoggedIn } = useAuth()

  // Screen Size Detection
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 1024)
    }

    checkMobile()
    window.addEventListener("resize", checkMobile)
    return () => window.removeEventListener("resize", checkMobile)
  }, [])

  const toggleSection = (sectionName) => {
    setOpenSection(openSection === sectionName ? null : sectionName)
  }

  useEffect(() => {
    // Check for session token in URL
    const urlParams = new URLSearchParams(window.location.search)
    const token = urlParams.get("token")
    if (token) {
      localStorage.setItem("sessionToken", token)
      window.history.replaceState({}, document.title, window.location.pathname)
    }
  }, [])

  // Desktop Navigation Render
  const renderDesktopNavigation = () => (
    <nav
      className={`
        hidden lg:flex fixed top-0 left-0 right-0 z-40
        ${colors.navigation.bg} ${colors.navigation.border} ${colors.navigation.text}
        ${colors.effects.backdrop} border-b
        items-center justify-between px-8 py-2
        shadow-lg transition-all duration-300
      `}
    >
      {/* Enhanced Logo */}
      <div className="flex items-center space-x-4">
        <div
          className={`rounded-xl flex items-center justify-center transition-all duration-300 hover:scale-105
`}         
        >
            <Link to="/" className="text-xl font-bold tracking-tight pl-4">
              <img src={prepmateLogo} alt="Prepmate Logo" className="h-[22px] w-auto" />
            </Link>
        </div>
        
      </div>

      {/* Navigation Sections with Enhanced Dropdowns */}
      <div className="flex items-center space-x-8 relative">
        {navigationSections.map((section) => (
          <div
            key={section.name}
            className="relative"
            onMouseEnter={() => toggleSection(section.name)}
            onMouseLeave={() => toggleSection(section.name)}
          >
            <div
              className={`
                flex items-center space-x-3 cursor-pointer px-5 py-3 rounded-xl
                transition-all duration-300 transform hover:scale-105 backdrop-blur-sm
                ${
                  isDarkMode
                    ? "hover:bg-slate-800/60 text-slate-300 border border-slate-700/50"
                    : "hover:bg-white/80 text-gray-700 border border-gray-200/50"
                }
              `}
              style={{
                boxShadow: isDarkMode ? "0 4px 15px rgba(139, 92, 246, 0.1)" : "0 4px 15px rgba(139, 92, 246, 0.1)",
              }}
            >
              <section.icon className={section.color} size={20} />
              <span className="font-semibold text-lg">{section.name}</span>
              <ChevronDown
                size={16}
                className={`
                  transition-transform
                  ${openSection === section.name ? "rotate-180" : ""}
                `}
              />
            </div>

            {/* Enhanced Dropdown Menu */}
            {openSection === section.name && (
              <div
                className={`
                  absolute top-full left-0  w-72
                  ${isDarkMode ? "bg-slate-800/95 text-slate-200 border-slate-700/50" : "bg-white/95 text-gray-800 border-gray-200/50"}
                  rounded-2xl shadow-2xl border backdrop-blur-md overflow-hidden z-50
                `}
                style={{
                  boxShadow: isDarkMode ? "0 25px 50px rgba(0, 0, 0, 0.5)" : "0 25px 50px rgba(0, 0, 0, 0.15)",
                }}
              >
                {section.subSections.map((subSection) => (
                  <Link
                    key={subSection.name}
                    to={subSection.route}
                    className={`
                      flex items-center justify-between p-4
                      cursor-pointer transition-all duration-300 group no-underline
                      ${isDarkMode ? "hover:bg-slate-700/50 text-slate-300" : "hover:bg-gray-100/50 text-gray-700"}
                      border-b last:border-b-0 ${isDarkMode ? "border-slate-700/50" : "border-gray-200/50"}
                    `}
                  >
                    <div className="flex items-center space-x-4">
                      <subSection.icon
                        className={`
                          ${isDarkMode ? "text-slate-400" : "text-gray-600"}
                          group-hover:scale-110 transition-transform
                        `}
                        size={22}
                      />
                      <span className="font-medium text-lg">{subSection.name}</span>
                    </div>
                    <ChevronRight
                      className={`
                        ${isDarkMode ? "text-slate-500" : "text-gray-400"}
                        group-hover:translate-x-1 transition-transform
                      `}
                      size={18}
                    />
                  </Link>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Enhanced Right Side Actions */}
      <div className="flex items-center space-x-6">
        {/* Streak Display - Only show when user is logged in */}
        {isLoggedIn && <StreakDisplay />}

        {/* Enhanced Theme Toggle */}
        <button
          onClick={toggleTheme}
          className={`
            p-3 rounded-xl transition-all duration-300 transform hover:scale-110 backdrop-blur-sm
            ${
              isDarkMode
                ? "text-yellow-400 hover:bg-slate-800/60 border border-slate-700/50"
                : "text-gray-600 hover:bg-white/80 border border-gray-200/50"
            }
          `}
          style={{
            boxShadow: isDarkMode ? "0 4px 15px rgba(251, 191, 36, 0.1)" : "0 4px 15px rgba(156, 163, 175, 0.1)",
          }}
        >
          {isDarkMode ? <Sun size={24} /> : <Moon size={24} />}
        </button>

        {/* Profile Section */}
        <ProfileDropdown onLogin={() => {}} onLogout={() => {}} />
      </div>
    </nav>
  )

  // Enhanced Mobile Navigation Render
  const renderMobileNavigation = () => (
    <>
      <nav
        className={`
          lg:hidden fixed top-0 left-0 right-0 z-40
          ${isDarkMode ? "bg-slate-900/90 text-gray-100" : "bg-white/90 text-gray-900"}
          backdrop-blur-md px-6 py-4 shadow-lg
          border-b ${isDarkMode ? "border-slate-800/50" : "border-gray-200/50"}
        `}
      >
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-3">
            <div
              className={` rounded-xl flex items-center justify-center
            `}
             
            >
              <Link to="/" className="text-xl font-bold tracking-tight pl-4">
              <img src={prepmateLogo} alt="Prepmate Logo" className="h-[22px] w-auto" />
            </Link>
            </div>
            
          </div>

          <div className="flex items-center space-x-4">
            {/* Mobile Streak Display */}
            {isLoggedIn && <StreakDisplay />}

            <button
              onClick={toggleTheme}
              className={`
                p-2 rounded-xl transition-all duration-300 backdrop-blur-sm
                ${isDarkMode ? "text-yellow-400 hover:bg-slate-800/60" : "text-gray-600 hover:bg-white/80"}
              `}
            >
              {isDarkMode ? <Sun size={22} /> : <Moon size={22} />}
            </button>

            <button
              onClick={() => setIsMobileMenuOpen(true)}
              className={`
                p-2 rounded-xl transition-all duration-300 backdrop-blur-sm
                ${isDarkMode ? "text-slate-300 hover:bg-slate-800/60" : "text-gray-600 hover:bg-white/80"}
              `}
            >
              <Menu size={24} />
            </button>
          </div>
        </div>
      </nav>

      <MobileMenu
        isOpen={isMobileMenuOpen}
        onClose={() => setIsMobileMenuOpen(false)}
        navigationSections={navigationSections}
      />
    </>
  )

  return (
    <div className={`${isDarkMode ? "dark bg-slate-950 text-gray-100" : "bg-white text-gray-900"}`}>
      {isMobile ? renderMobileNavigation() : renderDesktopNavigation()}
    </div>
  )
}

export default Navigation
